
// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('models/PointSet',['backbone'], function(Backbone) {
    var PointSet;
    return PointSet = (function(_super) {

      __extends(PointSet, _super);

      function PointSet() {
        return PointSet.__super__.constructor.apply(this, arguments);
      }

      PointSet.prototype.xValues = function() {
        return this.get("xValues");
      };

      PointSet.prototype.yValues = function() {
        return this.get("yValues");
      };

      return PointSet;

    })(Backbone.Model);
  });

}).call(this);

// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('models/SquareWave',['models/PointSet'], function(PointSet) {
    var SquareWave, sign;
    sign = function(x) {
      if (x >= 0) {
        return 1;
      } else {
        return -1;
      }
    };
    return SquareWave = (function(_super) {

      __extends(SquareWave, _super);

      function SquareWave() {
        return SquareWave.__super__.constructor.apply(this, arguments);
      }

      SquareWave.prototype.defaults = {
        phase: 0
      };

      SquareWave.prototype.initialize = function() {
        this.updateYValues();
        return this.on("change:amplitude change:period change:phase change:xValues", this.updateYValues);
      };

      SquareWave.prototype.updateYValues = function() {
        return this.set("yValues", this._calculateYValues());
      };

      SquareWave.prototype.yValues = function() {
        return this.get("yValues");
      };

      SquareWave.prototype._calculateYValues = function() {
        var x, _i, _len, _ref, _results;
        _ref = this.get("xValues");
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          _results.push((this.get("amplitude")) * sign(Math.sin(2 * Math.PI * x / (this.get("period")) + (this.get("phase")))));
        }
        return _results;
      };

      return SquareWave;

    })(PointSet);
  });

}).call(this);

// Generated by CoffeeScript 1.3.3
(function() {

  define('plot',[], function() {
    var plot2d;
    plot2d = function(canvas, xValues, yValues, options) {
      var ctx, displayY, i, x, yOffset, _i, _len;
      ctx = canvas.getContext("2d");
      if ((options != null ? options.modifyContext : void 0) != null) {
        options.modifyContext(ctx);
      }
      ctx.beginPath();
      yOffset = canvas.height / 2;
      i = 0;
      ctx.moveTo(xValues[i], yOffset - yValues[i]);
      for (i = _i = 0, _len = xValues.length; _i < _len; i = ++_i) {
        x = xValues[i];
        displayY = yOffset - yValues[i];
        ctx.lineTo(x, displayY);
      }
      return ctx.stroke();
    };
    return {
      plot2d: plot2d
    };
  });

}).call(this);

// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('views/PlotView',['backbone', 'plot'], function(Backbone, plot) {
    var PlotView;
    return PlotView = (function(_super) {

      __extends(PlotView, _super);

      function PlotView() {
        this.render = __bind(this.render, this);
        return PlotView.__super__.constructor.apply(this, arguments);
      }

      PlotView.prototype.tagName = "canvas";

      PlotView.prototype.initialize = function() {
        return this.collection.on("change", this.render);
      };

      PlotView.prototype.render = function() {
        var ctx,
          _this = this;
        ctx = this.el.getContext("2d");
        ctx.clearRect(0, 0, this.el.width, this.el.height);
        this.collection.each(function(pointSet) {
          var modifyContext;
          modifyContext = function(ctx) {
            var plotColor, plotLineWidth;
            plotColor = pointSet.get("plotColor");
            if (plotColor != null) {
              ctx.strokeStyle = plotColor;
            }
            plotLineWidth = pointSet.get("plotLineWidth");
            if (plotLineWidth != null) {
              return ctx.lineWidth = plotLineWidth;
            }
          };
          return plot.plot2d(_this.el, pointSet.xValues(), pointSet.yValues(), {
            modifyContext: modifyContext
          });
        });
        return this;
      };

      return PlotView;

    })(Backbone.View);
  });

}).call(this);

// Generated by CoffeeScript 1.3.3
(function() {

  define('signal',[], function() {
    var Complex, dft, inverseDft;
    Complex = (function() {

      function Complex(real, imaginary) {
        this.real = real;
        this.imaginary = imaginary;
      }

      return Complex;

    })();
    dft = function(values, numSeriesTerms) {
      var coefs, i, imaginaryCoef, k, realCoef, theta, w0, wk, y, _i, _j, _len;
      if (numSeriesTerms == null) {
        numSeriesTerms = values.length;
      }
      coefs = [];
      w0 = 2 * Math.PI / values.length;
      for (k = _i = 0; 0 <= numSeriesTerms ? _i < numSeriesTerms : _i > numSeriesTerms; k = 0 <= numSeriesTerms ? ++_i : --_i) {
        realCoef = imaginaryCoef = 0;
        wk = w0 * k;
        for (i = _j = 0, _len = values.length; _j < _len; i = ++_j) {
          y = values[i];
          theta = wk * i;
          realCoef += y * Math.cos(theta);
          imaginaryCoef += y * -1 * Math.sin(theta);
        }
        coefs[k] = new Complex(realCoef, imaginaryCoef);
      }
      return coefs;
    };
    inverseDft = function(complexCoefs, xValues) {
      var complexCoef, i, imaginaryValAtX, k, numCoefs, numXValues, output, realValAtX, theta, w0x, x, _i, _j, _len, _len1;
      numCoefs = complexCoefs.length;
      numXValues = xValues.length;
      output = [];
      for (i = _i = 0, _len = xValues.length; _i < _len; i = ++_i) {
        x = xValues[i];
        realValAtX = 0;
        imaginaryValAtX = 0;
        w0x = 2 * Math.PI * x / numXValues;
        for (k = _j = 0, _len1 = complexCoefs.length; _j < _len1; k = ++_j) {
          complexCoef = complexCoefs[k];
          theta = w0x * k;
          realValAtX += complexCoef.real * Math.cos(theta);
          imaginaryValAtX -= complexCoef.imaginary * Math.sin(theta);
        }
        output[i] = 2 / numXValues * (realValAtX + imaginaryValAtX);
      }
      return output;
    };
    return {
      Complex: Complex,
      dft: dft,
      inverseDft: inverseDft
    };
  });

}).call(this);

// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('models/DftPointSet',['backbone', 'models/PointSet', 'signal'], function(Backbone, PointSet, signal) {
    var DftPointSet;
    return DftPointSet = (function(_super) {

      __extends(DftPointSet, _super);

      function DftPointSet() {
        return DftPointSet.__super__.constructor.apply(this, arguments);
      }

      DftPointSet.prototype.defaults = {
        termsCount: 10
      };

      DftPointSet.prototype.initialize = function() {
        var emuPointSet;
        emuPointSet = this.get("emulationPointSet");
        emuPointSet.on("change:xValues change:yValues", this.recalculate);
        this.on("change:termsCount", this.recalculate);
        return this.recalculate();
      };

      DftPointSet.prototype.recalculate = function() {
        var dftCoefs, emuPointSet, newXValues, newYValues;
        emuPointSet = this.get("emulationPointSet");
        newXValues = emuPointSet.get("xValues");
        dftCoefs = signal.dft(emuPointSet.get("yValues"), this.get("termsCount"));
        newYValues = signal.inverseDft(dftCoefs, newXValues);
        this.set({
          xValues: newXValues,
          yValues: newYValues
        });
        return this;
      };

      return DftPointSet;

    })(PointSet);
  });

}).call(this);

define('templates/FourierSeriesWaveEditor',['hogan'],function(Hogan){return new Hogan.Template(function(c,p,i){var _=this;_.b(i=i||"");_.b("<div class=\"fourier-series-wave-editor\">");_.b("\n" + i);_.b("	<dl class=\"label-value\">");_.b("\n" + i);_.b("		<dt>Number of Fourier series terms</dt>");_.b("\n" + i);_.b("		<dd>");_.b("\n" + i);_.b("			<div class=\"fourier-series-terms-count-slider\"></div>");_.b("\n" + i);_.b("			<span class=\"fourier-series-terms-count\">");_.b(_.v(_.f("termsCount",c,p,0)));_.b("</span>");_.b("\n" + i);_.b("		</dd>");_.b("\n" + i);_.b("	</dl>");_.b("\n" + i);_.b("</div>");_.b("\n");return _.fl();;});});
// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('views/FourierSeriesWaveEditorView',['backbone', 'jquery', 'templates/FourierSeriesWaveEditor', 'jquery-ui'], function(Backbone, jQuery, template) {
    var FourierSeriesWaveEditorView;
    return FourierSeriesWaveEditorView = (function(_super) {

      __extends(FourierSeriesWaveEditorView, _super);

      function FourierSeriesWaveEditorView() {
        this.updateTermsCountDisplay = __bind(this.updateTermsCountDisplay, this);

        this.render = __bind(this.render, this);
        return FourierSeriesWaveEditorView.__super__.constructor.apply(this, arguments);
      }

      FourierSeriesWaveEditorView.prototype.initialize = function() {
        return this.model.on("change:termsCount", this.updateTermsCountDisplay);
      };

      FourierSeriesWaveEditorView.prototype.render = function() {
        var _this = this;
        this.$el.html(template.render(this.model.toJSON()));
        (this.$(".fourier-series-terms-count-slider")).slider({
          min: 1,
          value: this.model.get("termsCount"),
          slide: function(event, ui) {
            return _this.model.set("termsCount", ui.value);
          }
        });
        return this;
      };

      FourierSeriesWaveEditorView.prototype.updateTermsCountDisplay = function() {
        var termsCount;
        termsCount = this.model.get("termsCount");
        (this.$(".fourier-series-terms-count-slider")).slider("value", termsCount);
        (this.$(".fourier-series-terms-count")).text(termsCount);
        return this;
      };

      return FourierSeriesWaveEditorView;

    })(Backbone.View);
  });

}).call(this);

// Generated by CoffeeScript 1.3.3
(function() {

  require(['models/SquareWave', 'models/PointSet', 'views/PlotView', 'models/DftPointSet', 'views/FourierSeriesWaveEditorView'], function(SquareWave, PointSet, PlotView, DftPointSet, FourierSeriesWaveEditorView) {
    var $editorForm, numCoefs, plot, plotView, recreatedSquareWave, recreatedSquareWaveEditorView, squareWave, _i, _ref, _results;
    numCoefs = 35;
    plot = document.getElementById("ft-exploration-canvas");
    squareWave = new SquareWave({
      amplitude: plot.height / 2 * 0.75,
      period: plot.width / 3,
      xValues: (function() {
        _results = [];
        for (var _i = 0, _ref = plot.width; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this),
      plotColor: "black",
      plotLineWidth: 1
    });
    recreatedSquareWave = new DftPointSet({
      emulationPointSet: squareWave,
      plotColor: "rgba(0, 0, 256, .25)",
      plotLineWidth: 3
    });
    $editorForm = $("#wave-editor-form");
    recreatedSquareWaveEditorView = new FourierSeriesWaveEditorView({
      el: $editorForm,
      model: recreatedSquareWave
    });
    recreatedSquareWaveEditorView.render();
    plotView = new PlotView({
      el: plot,
      collection: new Backbone.Collection([squareWave, recreatedSquareWave])
    });
    return plotView.render();
  });

}).call(this);

define("ft_exploration", function(){});
