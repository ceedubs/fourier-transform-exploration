
// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('models/PointSet',['backbone'], function(Backbone) {
    var PointSet;
    return PointSet = (function(_super) {

      __extends(PointSet, _super);

      function PointSet() {
        return PointSet.__super__.constructor.apply(this, arguments);
      }

      return PointSet;

    })(Backbone.Collection);
  });

}).call(this);

// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('models/Point2d',['backbone'], function(Backbone) {
    var Point2d;
    return Point2d = (function(_super) {

      __extends(Point2d, _super);

      function Point2d() {
        return Point2d.__super__.constructor.apply(this, arguments);
      }

      Point2d.prototype.defaults = {
        x: 0,
        y: 0
      };

      return Point2d;

    })(Backbone.Model);
  });

}).call(this);

// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('models/SquareWave',['backbone', 'models/PointSet', 'models/Point2d'], function(Backbone, PointSet, Point2d) {
    var SquareWave;
    return SquareWave = (function(_super) {

      __extends(SquareWave, _super);

      function SquareWave() {
        this._calculateYValue = __bind(this._calculateYValue, this);

        this.updatePoints = __bind(this.updatePoints, this);
        return SquareWave.__super__.constructor.apply(this, arguments);
      }

      SquareWave.prototype.defaults = {
        phase: 0,
        amplitude: 1
      };

      SquareWave.prototype.initialize = function() {
        this.set("points", new PointSet);
        this.updatePoints();
        return this.on("change:amplitude change:period change:phase change:xValues", this.updatePoints);
      };

      SquareWave.prototype.updatePoints = function() {
        var xValues,
          _this = this;
        xValues = this.get("xValues");
        (this.get("points")).reset(_.map(xValues, function(x) {
          return new Point2d({
            x: x,
            y: _this._calculateYValue(x)
          });
        }));
        return this;
      };

      SquareWave.prototype._calculateYValue = function(x) {
        var sign;
        sign = function(x) {
          if (x >= 0) {
            return 1;
          } else {
            return -1;
          }
        };
        return (this.get("amplitude")) * sign(Math.sin(2 * Math.PI * x / (this.get("period")) + (this.get("phase"))));
      };

      return SquareWave;

    })(Backbone.Model);
  });

}).call(this);

// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('models/PlotPointSet',['backbone', 'models/PointSet'], function(Backbone, PointSet) {
    var PlotPointSet;
    return PlotPointSet = (function(_super) {

      __extends(PlotPointSet, _super);

      function PlotPointSet() {
        return PlotPointSet.__super__.constructor.apply(this, arguments);
      }

      PlotPointSet.prototype.defaults = {
        color: "black",
        lineWidth: "1",
        points: new PointSet
      };

      PlotPointSet.prototype.initialize = function() {
        var _this = this;
        return (this.get("points")).on("all", function(eventName) {
          return _this.trigger(eventName);
        });
      };

      return PlotPointSet;

    })(Backbone.Model);
  });

}).call(this);

// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('views/PlotView',['backbone', 'underscore', 'models/Point2d'], function(Backbone, _, Point2d) {
    var PlotView, flatMap, linearScale;
    flatMap = _.compose((function(l) {
      return _.flatten(l, true);
    }), _.map);
    linearScale = function(params) {
      var newRange, oldRange;
      oldRange = params.oldMax - params.oldMin;
      newRange = params.newMax - params.newMin;
      return function(x) {
        return (x - params.oldMin) * newRange / oldRange;
      };
    };
    return PlotView = (function(_super) {

      __extends(PlotView, _super);

      function PlotView() {
        this.render = __bind(this.render, this);
        return PlotView.__super__.constructor.apply(this, arguments);
      }

      PlotView.prototype.tagName = "canvas";

      PlotView.prototype.initialize = function() {
        return this.collection.on("all", this.render);
      };

      PlotView.prototype.render = function() {
        var allXs, allYs, ctx, maxX, maxY, minX, minY, newYMin, toXPixel, toYPixel, xPixelCount, yPixelCount, yScale, yScaleFactor, _ref, _ref1, _ref2,
          _this = this;
        allXs = flatMap(this.collection.models, function(plotPointSet) {
          var pointSet;
          pointSet = plotPointSet.get("points");
          return flatMap(pointSet.models, function(point) {
            return point.get("x");
          });
        });
        allYs = flatMap(this.collection.models, function(plotPointSet) {
          var pointSet;
          pointSet = plotPointSet.get("points");
          return flatMap(pointSet.models, function(point) {
            return point.get("y");
          });
        });
        _ref = [_.min(allXs), _.max(allXs)], minX = _ref[0], maxX = _ref[1];
        _ref1 = [_.min(allYs), _.max(allYs)], minY = _ref1[0], maxY = _ref1[1];
        xPixelCount = this.el.width;
        yPixelCount = this.el.height;
        yScaleFactor = (_ref2 = this.options.yScaleFactor) != null ? _ref2 : .9;
        toXPixel = linearScale({
          oldMin: minX,
          oldMax: maxX,
          newMin: 0,
          newMax: xPixelCount
        });
        newYMin = (1 - yScaleFactor) * yPixelCount;
        yScale = linearScale({
          oldMin: minY,
          oldMax: maxY,
          newMin: newYMin,
          newMax: yScaleFactor * yPixelCount
        });
        toYPixel = function(y) {
          return yPixelCount - (newYMin + yScale(y));
        };
        ctx = this.el.getContext("2d");
        ctx.clearRect(0, 0, this.el.width, this.el.height);
        this.collection.each(function(plotPointSet) {
          var displayPoints, firstPoint, pointSet;
          pointSet = plotPointSet.get("points");
          displayPoints = pointSet.map(function(point2d) {
            return new Point2d({
              x: toXPixel(point2d.get("x")),
              y: toYPixel(point2d.get("y"))
            });
          });
          ctx.strokeStyle = plotPointSet.get("color");
          ctx.lineWidth = plotPointSet.get("lineWidth");
          ctx.beginPath();
          firstPoint = displayPoints[0];
          ctx.moveTo(firstPoint.get("x"), firstPoint.get("y"));
          _.forEach(displayPoints, function(point) {
            return ctx.lineTo(point.get("x"), point.get("y"));
          });
          return ctx.stroke();
        });
        return this;
      };

      return PlotView;

    })(Backbone.View);
  });

}).call(this);

// Generated by CoffeeScript 1.3.3
(function() {

  define('signal',[], function() {
    var Complex, dft, inverseDft;
    Complex = (function() {

      function Complex(real, imaginary) {
        this.real = real;
        this.imaginary = imaginary;
      }

      return Complex;

    })();
    dft = function(values, numSeriesTerms) {
      var coefs, i, imaginaryCoef, k, realCoef, theta, w0, wk, y, _i, _j, _len;
      if (numSeriesTerms == null) {
        numSeriesTerms = values.length;
      }
      coefs = [];
      w0 = 2 * Math.PI / values.length;
      for (k = _i = 0; 0 <= numSeriesTerms ? _i < numSeriesTerms : _i > numSeriesTerms; k = 0 <= numSeriesTerms ? ++_i : --_i) {
        realCoef = imaginaryCoef = 0;
        wk = w0 * k;
        for (i = _j = 0, _len = values.length; _j < _len; i = ++_j) {
          y = values[i];
          theta = wk * i;
          realCoef += y * Math.cos(theta);
          imaginaryCoef += y * -1 * Math.sin(theta);
        }
        coefs[k] = new Complex(realCoef, imaginaryCoef);
      }
      return coefs;
    };
    inverseDft = function(complexCoefs, xValues) {
      var complexCoef, i, imaginaryValAtX, k, numCoefs, numXValues, output, realValAtX, theta, w0x, x, _i, _j, _len, _len1;
      numCoefs = complexCoefs.length;
      numXValues = xValues.length;
      output = [];
      for (i = _i = 0, _len = xValues.length; _i < _len; i = ++_i) {
        x = xValues[i];
        realValAtX = 0;
        imaginaryValAtX = 0;
        w0x = 2 * Math.PI * x / numXValues;
        for (k = _j = 0, _len1 = complexCoefs.length; _j < _len1; k = ++_j) {
          complexCoef = complexCoefs[k];
          theta = w0x * k;
          realValAtX += complexCoef.real * Math.cos(theta);
          imaginaryValAtX -= complexCoef.imaginary * Math.sin(theta);
        }
        output[i] = 2 / numXValues * (realValAtX + imaginaryValAtX);
      }
      return output;
    };
    return {
      Complex: Complex,
      dft: dft,
      inverseDft: inverseDft
    };
  });

}).call(this);

// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('models/DiscreteFourierSeries',['backbone', 'models/Point2d', 'models/PointSet', 'signal'], function(Backbone, Point2d, PointSet, signal) {
    var DiscreteFourierSeries, flatMap;
    flatMap = _.compose((function(l) {
      return _.flatten(l, true);
    }), _.map);
    return DiscreteFourierSeries = (function(_super) {

      __extends(DiscreteFourierSeries, _super);

      function DiscreteFourierSeries() {
        this.recalculatePoints = __bind(this.recalculatePoints, this);
        return DiscreteFourierSeries.__super__.constructor.apply(this, arguments);
      }

      DiscreteFourierSeries.prototype.defaults = {
        termsCount: 10
      };

      DiscreteFourierSeries.prototype.initialize = function() {
        this.set("points", new PointSet);
        (this.get("emulationPointSet")).on("all", this.recalculatePoints);
        this.on("change:termsCount", this.recalculatePoints);
        return this.recalculatePoints();
      };

      DiscreteFourierSeries.prototype.recalculatePoints = function() {
        var dftCoefs, emuPointSet, newEmuYValues, newPoints, newXValues, newYValues;
        emuPointSet = this.get("emulationPointSet");
        newXValues = flatMap(emuPointSet.models, function(point) {
          return point.get("x");
        });
        newEmuYValues = flatMap(emuPointSet.models, function(point) {
          return point.get("y");
        });
        dftCoefs = signal.dft(newEmuYValues, this.get("termsCount"));
        newYValues = signal.inverseDft(dftCoefs, newXValues);
        newPoints = _.map(_.zip(newXValues, newYValues), function(point) {
          var x, y;
          x = point[0], y = point[1];
          return new Point2d({
            x: x,
            y: y
          });
        });
        return (this.get("points")).reset(newPoints);
      };

      return DiscreteFourierSeries;

    })(Backbone.Model);
  });

}).call(this);

define('templates/FourierSeriesWaveEditor',['hogan'],function(Hogan){return new Hogan.Template(function(c,p,i){var _=this;_.b(i=i||"");_.b("<div class=\"fourier-series-wave-editor\">");_.b("\n" + i);_.b("	<dl class=\"label-value\">");_.b("\n" + i);_.b("		<dt>Number of Fourier series terms</dt>");_.b("\n" + i);_.b("		<dd>");_.b("\n" + i);_.b("			<div class=\"fourier-series-terms-count-slider\"></div>");_.b("\n" + i);_.b("			<span class=\"fourier-series-terms-count\">");_.b(_.v(_.f("termsCount",c,p,0)));_.b("</span>");_.b("\n" + i);_.b("		</dd>");_.b("\n" + i);_.b("	</dl>");_.b("\n" + i);_.b("</div>");_.b("\n");return _.fl();;});});
// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('views/FourierSeriesWaveEditorView',['backbone', 'jquery', 'templates/FourierSeriesWaveEditor', 'jquery-ui'], function(Backbone, jQuery, template) {
    var FourierSeriesWaveEditorView;
    return FourierSeriesWaveEditorView = (function(_super) {

      __extends(FourierSeriesWaveEditorView, _super);

      function FourierSeriesWaveEditorView() {
        this.updateTermsCountDisplay = __bind(this.updateTermsCountDisplay, this);

        this.render = __bind(this.render, this);
        return FourierSeriesWaveEditorView.__super__.constructor.apply(this, arguments);
      }

      FourierSeriesWaveEditorView.prototype.initialize = function() {
        return this.model.on("change:termsCount", this.updateTermsCountDisplay);
      };

      FourierSeriesWaveEditorView.prototype.render = function() {
        var _this = this;
        this.$el.html(template.render(this.model.toJSON()));
        (this.$(".fourier-series-terms-count-slider")).slider({
          min: 1,
          value: this.model.get("termsCount"),
          slide: function(event, ui) {
            return _this.model.set("termsCount", ui.value);
          }
        });
        return this;
      };

      FourierSeriesWaveEditorView.prototype.updateTermsCountDisplay = function() {
        var termsCount;
        termsCount = this.model.get("termsCount");
        (this.$(".fourier-series-terms-count-slider")).slider("value", termsCount);
        (this.$(".fourier-series-terms-count")).text(termsCount);
        return this;
      };

      return FourierSeriesWaveEditorView;

    })(Backbone.View);
  });

}).call(this);

// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('models/PeriodicPointSet',['backbone', 'models/PointSet', 'models/Point2d'], function(Backbone, PointSet, Point2d) {
    var PeriodicPointSet;
    return PeriodicPointSet = (function(_super) {

      __extends(PeriodicPointSet, _super);

      function PeriodicPointSet() {
        this.recalculatePoints = __bind(this.recalculatePoints, this);
        return PeriodicPointSet.__super__.constructor.apply(this, arguments);
      }

      PeriodicPointSet.prototype.defaults = {
        singlePeriodPoints: new PointSet(),
        periodCount: 2
      };

      PeriodicPointSet.prototype.initialize = function() {
        this.set("points", new PointSet);
        this.recalculatePoints();
        (this.get("singlePeriodPoints")).on("all", this.recalculatePoints);
        return this.on("change:periodCount change:singlePeriodPoints", this.recalculatePoints);
      };

      PeriodicPointSet.prototype.recalculatePoints = function() {
        var firstPoint, i, lastPoint, newPoints, period, pointCount, singlePeriodPoints, _i, _ref;
        singlePeriodPoints = this.get("singlePeriodPoints");
        pointCount = singlePeriodPoints.length;
        firstPoint = singlePeriodPoints.at(0);
        lastPoint = singlePeriodPoints.at(pointCount - 1);
        period = (lastPoint.get("x")) - (firstPoint.get("x"));
        newPoints = [];
        for (i = _i = 0, _ref = (this.get("periodCount")) - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          singlePeriodPoints.forEach(function(point, singlePeriodIndex) {
            var newPointIndex;
            newPointIndex = i * period + singlePeriodIndex;
            return newPoints[newPointIndex] = new Point2d({
              x: i * period + (point.get("x")),
              y: point.get("y")
            });
          });
        }
        return (this.get("points")).reset(newPoints);
      };

      return PeriodicPointSet;

    })(Backbone.Model);
  });

}).call(this);

// Generated by CoffeeScript 1.3.3
(function() {

  require(['models/SquareWave', 'models/PlotPointSet', 'views/PlotView', 'models/DiscreteFourierSeries', 'views/FourierSeriesWaveEditorView', 'models/PeriodicPointSet'], function(SquareWave, PlotPointSet, PlotView, DiscreteFourierSeries, FourierSeriesWaveEditorView, PeriodicPointSet) {
    var $editorForm, fullRecreatedSquareWave, fullSquareWave, numCycles, period, plot, plotView, recreatedSquareWave, recreatedSquareWaveEditorView, squareWave, x;
    numCycles = 3;
    plot = document.getElementById("ft-exploration-canvas");
    period = plot.width / numCycles;
    squareWave = new SquareWave({
      period: period,
      xValues: (function() {
        var _i, _results;
        _results = [];
        for (x = _i = 0; 0 <= period ? _i <= period : _i >= period; x = 0 <= period ? ++_i : --_i) {
          _results.push(x);
        }
        return _results;
      })()
    });
    recreatedSquareWave = new DiscreteFourierSeries({
      emulationPointSet: squareWave.get("points")
    });
    $editorForm = $("#wave-editor-form");
    recreatedSquareWaveEditorView = new FourierSeriesWaveEditorView({
      el: $editorForm,
      model: recreatedSquareWave
    });
    recreatedSquareWaveEditorView.render();
    fullSquareWave = new PeriodicPointSet({
      singlePeriodPoints: squareWave.get("points"),
      periodCount: numCycles
    });
    fullRecreatedSquareWave = new PeriodicPointSet({
      singlePeriodPoints: recreatedSquareWave.get("points"),
      periodCount: numCycles
    });
    plotView = new PlotView({
      el: plot,
      collection: new Backbone.Collection([
        new PlotPointSet({
          points: fullSquareWave.get("points"),
          color: "black",
          lineWidth: "1"
        }), new PlotPointSet({
          points: fullRecreatedSquareWave.get("points"),
          color: "rgba(0, 0, 256, .25)",
          lineWidth: 3
        })
      ])
    });
    return plotView.render();
  });

}).call(this);

define("ft_exploration", function(){});
