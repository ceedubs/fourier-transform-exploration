// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['models/PointSet'], function(PointSet) {
    var SquareWave, sign;
    sign = function(x) {
      if (x >= 0) {
        return 1;
      } else {
        return -1;
      }
    };
    return SquareWave = (function(_super) {

      __extends(SquareWave, _super);

      function SquareWave() {
        return SquareWave.__super__.constructor.apply(this, arguments);
      }

      SquareWave.prototype.defaults = {
        phase: 0
      };

      SquareWave.prototype.initialize = function() {
        this.updateYValues();
        return this.on("change:amplitude change:period change:phase change:xValues", this.updateYValues);
      };

      SquareWave.prototype.updateYValues = function() {
        return this.set("yValues", this._calculateYValues());
      };

      SquareWave.prototype.yValues = function() {
        return this.get("yValues");
      };

      SquareWave.prototype._calculateYValues = function() {
        var x, _i, _len, _ref, _results;
        _ref = this.get("xValues");
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          _results.push((this.get("amplitude")) * sign(Math.sin(2 * Math.PI * x / (this.get("period")) + (this.get("phase")))));
        }
        return _results;
      };

      return SquareWave;

    })(PointSet);
  });

}).call(this);
