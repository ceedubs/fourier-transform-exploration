// Generated by CoffeeScript 1.3.3
(function() {
  var amplitude, canvas, dft, imaginaryCoefs, inverseDft, numCoefs, period, plot2d, realCoefs, recreatedSquareVals, sign, squareDft, squareWave, xValues, yValues, _i, _ref, _results;

  plot2d = function(canvas, xValues, yValues, options) {
    var ctx, displayY, i, x, yOffset, _i, _len;
    ctx = canvas.getContext("2d");
    if ((options != null ? options.modifyContext : void 0) != null) {
      options.modifyContext(ctx);
    }
    ctx.beginPath();
    yOffset = canvas.height / 2;
    i = 0;
    ctx.moveTo(xValues[i], yOffset - yValues[i]);
    for (i = _i = 0, _len = xValues.length; _i < _len; i = ++_i) {
      x = xValues[i];
      displayY = yOffset - yValues[i];
      ctx.lineTo(x, displayY);
    }
    return ctx.stroke();
  };

  sign = function(x) {
    if (x >= 0) {
      return 1;
    } else {
      return -1;
    }
  };

  squareWave = function(xValues, amplitude, period) {
    var x, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = xValues.length; _i < _len; _i++) {
      x = xValues[_i];
      _results.push(amplitude * sign(Math.sin(2 * Math.PI * x / period)));
    }
    return _results;
  };

  dft = function(values) {
    var i, imaginaryCoef, imaginaryCoefs, k, numPoints, realCoef, realCoefs, theta, w0, wk, y, _i, _j, _len;
    numPoints = values.length;
    realCoefs = [];
    imaginaryCoefs = [];
    w0 = 2 * Math.PI / numPoints;
    for (k = _i = 0; 0 <= numPoints ? _i < numPoints : _i > numPoints; k = 0 <= numPoints ? ++_i : --_i) {
      realCoef = imaginaryCoef = 0;
      wk = w0 * k;
      for (i = _j = 0, _len = values.length; _j < _len; i = ++_j) {
        y = values[i];
        theta = wk * i;
        realCoef += y * Math.cos(theta);
        imaginaryCoef += y * -1 * Math.sin(theta);
      }
      realCoefs[k] = realCoef;
      imaginaryCoefs[k] = imaginaryCoef;
    }
    return {
      real: realCoefs,
      imaginary: imaginaryCoefs
    };
  };

  inverseDft = function(realFtCoefs, imaginaryFtCoefs, xValues) {
    var i, imaginaryValAtX, imaginaryVals, k, numCoefs, realValAtX, realVals, theta, w0x, x, _i, _j, _len;
    numCoefs = realFtCoefs.length;
    realVals = [];
    imaginaryVals = [];
    for (i = _i = 0, _len = xValues.length; _i < _len; i = ++_i) {
      x = xValues[i];
      realValAtX = 0;
      imaginaryValAtX = 0;
      w0x = 2 * Math.PI * x / numCoefs;
      for (k = _j = 0; 0 <= numCoefs ? _j < numCoefs : _j > numCoefs; k = 0 <= numCoefs ? ++_j : --_j) {
        theta = w0x * k;
        realValAtX += realFtCoefs[k] * Math.cos(theta);
        imaginaryValAtX -= imaginaryFtCoefs[k] * Math.sin(theta);
      }
      realVals[i] = realValAtX / numCoefs;
      imaginaryVals[i] = imaginaryValAtX / numCoefs;
    }
    return {
      real: realVals,
      imaginary: imaginaryVals
    };
  };

  canvas = document.getElementById("ft-exploration-canvas");

  if (canvas.getContext != null) {
    amplitude = canvas.height / 2 * 0.9;
    period = canvas.width / 3;
    xValues = (function() {
      _results = [];
      for (var _i = 0, _ref = canvas.width; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this);
    yValues = squareWave(xValues, amplitude, period);
    plot2d(canvas, xValues, yValues, {
      modifyContext: function(ctx) {
        ctx.lineWidth = 1;
        return ctx.strokeStyle = "black";
      }
    });
    squareDft = dft(yValues);
    numCoefs = xValues.length;
    realCoefs = squareDft.real.slice(0, numCoefs);
    imaginaryCoefs = squareDft.imaginary.slice(0, numCoefs);
    recreatedSquareVals = inverseDft(realCoefs, imaginaryCoefs, xValues);
    plot2d(canvas, xValues, recreatedSquareVals.imaginary, {
      modifyContext: function(ctx) {
        ctx.lineWidth = 4;
        return ctx.strokeStyle = "rgba(256, 0, 0, .25)";
      }
    });
    plot2d(canvas, xValues, recreatedSquareVals.real, {
      modifyContext: function(ctx) {
        ctx.lineWidth = 4;
        return ctx.strokeStyle = "rgba(0, 0, 256, .25)";
      }
    });
  }

}).call(this);
